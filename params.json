{"name":"RussiaCC","tagline":"A Class Project for investigating possible Russian Collateral Censorship","body":"### A Class Project for CSE534\r\nStudent Colaborators:\r\n\r\nJesse Brizzi (@jessebrizzi)  \r\nKonstantin Dmitriev (@dmitrievk)  \r\nAlan Tian (@alantian)\r\n\r\nIn this project we are proposing a survey of neighboring sovereign\r\nnations to modern day Russia to investigate any possible collateral\r\ncensorship. Given the socioeconomic state of some of these countries\r\nthere may be limited infrastructure for Internet access, which requires\r\ntheir traffic to be routed through Russian territory. Russia actively\r\ncensors various websites and Internet sources based on various reasons.\r\n\r\nCollateral Censorship, Russia, Block, DPI, DNS, IP.\r\n\r\nMotivation\r\n==========\r\n\r\nIn the summer of 2008, when Russia’s mass media and telecom watchdog\r\nRoskomnadzor [^1] was re-established, the Russian Internet, or RuNet,\r\nchanged significantly. This Federal Service is regulated and put into\r\nmotion by two laws, - “On Protecting Children from Information Harmful\r\nto Their Health and Development”@krem1 and “On Information, Information\r\nTechnology and Information Protection”@krem2. Both of them give judges a\r\nfree hand in decision-making. As a result, a number of websites have\r\nbeen blocked quite chaotically, starting with opposition websites and\r\narticles, to Bitcoin communities and GitHub.\r\n\r\nSometimes such censorship systems can case collateral censorship, or\r\ndamage. They block access to sites from users beyond those intended to\r\nprotect@anon1. This projects goal is to examine the effect of such\r\npossible collateral censorship to the requests that are originating from\r\noutside of Russia, with the possible extension to other countries that\r\nmaintain the censoring services. The result of this project can be used\r\nto create a detailed analysis of collateral damage caused by different\r\ntypes of censoring techniques, and to potentially discover the paths at\r\nfault.\r\n\r\nRelated Work\r\n============\r\n\r\nNot a lot of research has been done in the area of the collateral\r\ncensorship between networks in different countries. Partly because the\r\nimpact of Internet censorship on global Internet service is usually\r\nunintended, and the probability of getting any results is fairly small.\r\nHowever, China’s injection of forged DNS responses has been reported to\r\ncause large scale collateral damage by blocking outside traffic that\r\ntraverses Chinese links @anon1. The analysis shows that in the most\r\nextreme case, 70% of the open resolvers from Korea suffer collateral\r\ndamage for queries to .de domains. Upstream filtering can also be behind\r\ntraffic blockage outside of a censoring area due to ISP routing\r\narrangements (for example, the Indian Internet filtering some users in\r\nOman who are not able to access certain webpages @iclab1).\r\n\r\nCensorship tools\r\n================\r\n\r\nThe Russian Internet Service Providers (ISPs) and government use a\r\nnumber of different censorship techniques to block access to “unwanted”\r\nwebsites. Fig. [fig:fig1] shows a chart of the most popular ones by the\r\nnumber of providers that maintain a particular method.\r\n\r\n[ ybar, enlargelimits=0.15, legend\r\nstyle=<span>at=<span>(0.5,-0.15)</span>, anchor=north,legend\r\ncolumns=-1</span>, ylabel=<span>\\#providers</span>, symbolic x\r\ncoords=<span>DPI-IP, IP, DPI-FULL, DNS</span>, xtick=data, nodes near\r\ncoords, nodes near coords align=<span>vertical</span>, x tick label\r\nstyle=<span>rotate=45,anchor=east</span>, xlabel=<span>Blocking\r\nMethod</span>, x label style=<span>at=<span>(0.5,-0.25)</span></span> ]\r\ncoordinates <span>(DPI-IP,430) (IP,235) (DPI-FULL,125) (DNS,\r\n155)</span>;\r\n\r\nResources\r\n=========\r\n\r\nAs a main reference for blacklisted URLs, domain names, and IPs in\r\nRussia, we use lists provided by the ICLab, they are maintained\r\nspecifically to test URL censoring. These lists are divided by country\r\ncodes. Some websites are in English, some are in the local language and\r\npicked individually by the regional expert. They have content\r\nrepresenting a wide range of categories:\r\n\r\n-   Politics\r\n\r\n-   Social (sexuality, gambling, and illegal drugs and alcohol)\r\n\r\n-   Conflict/Security (armed conflicts, border disputes, separatist\r\n    movements, and militant groups)\r\n\r\n-   Internet Tools (web sites that provide e-mail, Internet hosting,\r\n    search, translation, Voice-over Internet Protocol (VoIP) telephone\r\n    service)\r\n\r\nChallenges\r\n----------\r\n\r\nManually analyzing lists of the blocked URLs for some countries we\r\nrealized that some of them have the same censored websites, which, if\r\nnot taking this into account, would give us wrong results - we might\r\nmistakenly think that some country is affected by the Russian collateral\r\ncensorship, when in fact it has its own censorship. In order to overcome\r\nthis problem, we have refiltered the list of the blocked URLs for\r\nRussia, our main list, in a way that have only unique URLs, that are\r\nblocked only in Russia. This procedure reduced the size of the Russian\r\nlist down to 141 URLs.\r\n\r\nAs a reference of the potential victims of the collateral censorship, we\r\nuse telegraphy maps (Fig. [fig:fig3]), and the map of the supported\r\ncountries for one of the largest Russian backbone service provider (Fig.\r\n[fig:fig2]), concentrating on the bordering countries.\r\n\r\nAlso we are using VPNs provided by IP Vanish [^2]\r\n\r\n![Telegeography Map of the Region [teleG]<span\r\ndata-label=\"fig:fig3\"></span>](routeMap.png)\r\n\r\n![RETN’s backbone map [RetnMap]<span\r\ndata-label=\"fig:fig2\"></span>](figure2.png)\r\n\r\nResearch Outline\r\n================\r\n\r\nUltimate Aim\r\n------------\r\n\r\nOur ultimate aim is to write an experiment in the form of Python scripts\r\nthat will probe websites censored in Russia from various points in\r\nneighboring countries. This experiment will not only be able to compare\r\nthe received web-pages with the blocked ones, but also return the score\r\nof the similarity between the received and the blocked web-pages. To\r\ncollect the source code of blocked web-pages we use IPVanish and\r\nExpressVPN servers.\r\n\r\nIn order to create this experiment, we use the following modules:\r\n\r\n1.  **urllib** - for network resource access;\r\n\r\n2.  **socket** - to get an access to the BSD socket interface;\r\n\r\n3.  **ssl** - to get an access to Transport Layer Security encryption\r\n    and peer authentication facilities for network socket;\r\n\r\n4.  **dnspython** - to get an access to high and low levels of DNS.\r\n\r\nand, of course, the OpenVPN [^3] client to connect to VPN servers. Also\r\nwe utilize the scripts from Tunnelblick [^4] for connection setup.\r\n\r\nChallenges\r\n----------\r\n\r\nGiven the possibility where no censorship leakage is found, we will\r\nrestructure the experiment to try and prove our results are accurate,\r\ni.e.  that there is little to no collateral censorship resulting from\r\nthe Russian government. This is done by repeating the experiment\r\nmultiple times at different times of the day, along with expanding our\r\nlist of candidates for possible collateral censorship to other countries\r\nin close proximity geographically and in terms of Internet topology.\r\n\r\nMethodology\r\n===========\r\n\r\nIn order to measure possible collateral damage caused by Russian\r\ncensorship, we conduct an experiment that can be coarsely divided into 3\r\nparts:\r\n\r\n1.  Set a connection to a VPN server from a list of examined countries.\r\n\r\n2.  Access and collect HTML code of web-pages that are blocked in\r\n    Russia.\r\n\r\n3.  Compare the percent of similarity between web-pages access from\r\n    Russia and outside of it.\r\n\r\nThe overall process is illustrated in Figure 4.\r\n\r\n![Scheme of the experiment [diag1]<span\r\ndata-label=\"fig:fig4\"></span>](diag1.png)\r\n\r\nVPN\r\n---\r\n\r\nFor the connections, we are facing the following challenges:\r\n\r\n1.  Access to web pages from different place, the basic need for our\r\n    experiments, is required.\r\n\r\n2.  Renting machines, either physical or virtual, is beyond our\r\n    consideration, because the renting is either too expensive, or just\r\n    unavailable in several countries.\r\n\r\n3.  All communication, including data retrieval and other things like\r\n    DNS request, should be done in the destination countries, because\r\n    Collateral Censorship is sensitive to the path, which in turn is\r\n    sensitive to DNS result.\r\n\r\nWe are using servers provided by IPVanish and ExpressVPN because they\r\nprovide access from many countries. According to it’s website [^5], its\r\nservers “span 25,000+ IPs on 165+ servers in 60+ countries”. This is a\r\nhuge advantage as countries near Russia, like Finland and Estonia, are\r\namong countries supported by IP Vanish, thus we can investigate the\r\ninfluence of Russian censorship on its geographical neighbors. Also, we\r\nare using a computer directly located in Russia to get more accurate\r\nresult for Russia censorship.\r\n\r\nFor our VPN client we are using OpenVPN. Basically, we conntect to a\r\nOpenVPN server hosted by IP Vanish using configuration files provided by\r\nIP Vanish and associated credits. Also we are using scripts from\r\nTunnelblick to handle setting-up / tearing-down the connection on Mac OS\r\nX systems. We are running OpenVPN in daemon mode, communicating with it\r\nvia a telnet server open locally for management purpose.\r\n\r\nData Collection\r\n---------------\r\n\r\nThe high-level description of the data collection algorithm is presented\r\nin pseudocode on Algorithm [algo:highlevel].\r\n\r\nInput: **ListOfCountries**, **ListOfURLs** <span> Establish a connection\r\n<span> Access a webpage (timeout = 2 sec) Store its HTML code </span>\r\n</span>\r\n\r\nThe algorithm goes through every country in the list of selected\r\ncountries, then it establishes a VPN connection, and going through all\r\n141 urls from the list of blocked URLs in Russia, it accesses the\r\nwebpage within 2 seconds timeout and stores its HTML code for the\r\nfurther comparison.\r\n\r\nFor the data collection purpose we implemented a special class -\r\n<span>`CollectData`</span>. Its instance connects to a specified VPN\r\nserver and performs either collection of a single wep-page, specified by\r\na URL from multiple countries, or collects a list of web-pages, using\r\nsingle VPN connection (Country major vs Website major order). This gives\r\nus the option of targeting a specific website in a small time windows to\r\nminimise differences in time sensitive content.\r\n\r\nAfter the web-page access attempt, there could be four possible\r\noutcomes:\r\n\r\n1.  An original web-page.\r\n\r\n2.  A web-page with a removed part (partial censorship,\r\n    Figure [fig:partial]).\r\n\r\n3.  A censorship’s system brochure web-page (Figure [fig:brochure]).\r\n\r\n4.  A failure to load a web-page.\r\n\r\nIn order to deal with the final case, we stop waiting for a response\r\nafter 2 seconds (Timeout parameter).\r\n\r\n![Example of provider’s brochure page<span\r\ndata-label=\"fig:brochure\"></span>](azartplay-kyrgystan.png)\r\n\r\n<span>0.3</span> ![Example of the partial censorship<span\r\ndata-label=\"fig:partial\"></span>](twi1.png \"fig:\")\r\n\r\n\\\r\n\r\n<span>0.3</span> ![Example of the partial censorship<span\r\ndata-label=\"fig:partial\"></span>](twi2.png \"fig:\")\r\n\r\nWeb Page Comparison\r\n-------------------\r\n\r\nWeb Page comparison is an essential part of our project. The aim is to\r\ncompare similarity between different copies of a same page accessed from\r\ndifference countries. Censorship usually alters the content of web\r\npages, so if a pages is effected by censorship in one country, the\r\ncontent varies between a copy accessed from this country, and one from a\r\nreference country. In this scenario, comparing the similarity between\r\nthese different copies provides us an efficient way to detect and\r\nquantify the content changes.\r\n\r\nHowever, the content changes can also happen due to reasons besides\r\ncensorship. Some of the reasons can be temporal, for example a change of\r\ntime stamp in these copies are totally reasonable, while another example\r\nmay be news block in some news sites. Also valid reasons are\r\ngeographical customization, such as local news may vary from one place\r\nto another one.\r\n\r\nThese two kinds of content changes are different: The changes due to\r\ncensorship are tend to replace the whole page, while the normal changes\r\nare more block-wised, and thus preserving general architecture of web\r\npages. Therefore, Our algorithm should be sensitive to a fully change\r\npage, but meanwhile insensitive to block changes, especially those small\r\nones.\r\n\r\n$F_{0\\dots n, 0\\dots m} \\gets 0$ $F_{n,m}$\r\n\r\nWe hereby propose the use of Longest Common Subsequence, or LCS, for\r\nscoring. LCS is a good metric for HTML file comparison, because it is\r\nrelatively robust to block-wise content change, which means a DOM tree\r\nnode is replaced by another one, while preseving other parts of the\r\ntree. The algorithm for LCS is detailed on Algorithm [algo:lcs]. More\r\nprecisely, we use the following scoring formula:\r\n$$Score(s_1,s_2) = \\frac{LCS(s_1,s_2)}{Len(s_1)+Len(s_2)}$$ to ensure\r\nthat our similarity metric would not prefer longer/shorter web pages.\r\nThis metric means that a larger score means larger degree of similarity,\r\nalso the score is constrainted in a given range\r\n($0\\leq score \\leq 0.5$), so the results are comparable for all page\r\nlength.\r\n\r\nHowever, a plain implementation of LCS is time-consuming: It requires\r\n$O(n m)$ time to compute where $n$ and $m$ are lengths of two strings,\r\nrespectively. This is insufficient for HTML comparison because the\r\naverage size of contemporary pages has already excessed $1.6$ million\r\nbits[^6], or $200$ kilo-bytes.\r\n\r\n$i \\gets 1$ $j \\gets 1$ $lcs \\gets 0$ $F_{n,m}$\r\n\r\nThis means that we should need to use some algorithm which is more\r\nefficient. One of such an algorithm we are using is Sift3b @sift3b,\r\nwhich is an approximate algorithm with speed optimizations, as shown on\r\nAlgorithm [algo:sift3b].\r\n\r\nSift3b approximate the longest common subsequence by setting an\r\nparameter $O$, or max offset, and ignoring attempts to matching\r\ncharacters whose offset is larger than max offset. This means the\r\nrunning time of Sift3b is $O( (n+m) O)$ where $n$ and $m$ are lengths of\r\ntwo strings, respectively. This means we can have some kind of\r\ntrade-off, because a larger max offset means better approximation and\r\nslower running time. For our problem, we choose $O=130$ for a balance\r\nbetween accuracy and running time.\r\n\r\nResults\r\n=======\r\n\r\nAfter running the comparison algorithm and assigning every page a score,\r\nwe measure the possibility of some country being affected by the\r\ncollateral censorship by analyzing the data, same 141 webpages, but\r\naccessed from the USA. We ran the comparing algorithm once again,\r\ncalculated the score for every page accessed from the USA, estimated the\r\nmean $\\mu^{USA}$ and the standard deviation $\\sigma^{USA}$. Then, we\r\nassume, that if some country has a mean value which is more than the\r\nmean value for the USA, then there is a high chance of the censorship\r\nleakage from Russia:\r\n$$\\mu^{country} > \\mu^{USA} + k*\\sigma^{USA} - country\\ is\\ affected$$\\\r\n$$\\mu^{country} \\leq \\mu^{USA} + k*\\sigma^{USA} - country\\ is\\ not\\ affected$$\r\n\r\nFor the final step, we’ve collected more than 25000 webpages, using\r\nIPVanish and ExpressVPN servers, the results are presented in\r\nFigure [fig:results]. This bar chart shows that 4 countries (Belarus,\r\nEstonia, Lithuania and Ukraine) show some signs of the possible\r\ncensorship leakage.\r\n\r\nThere is another interesting finding. We were able to detect sings of\r\nthe censorship leakage only from IPVanish vantage points. The possible\r\nexplanation is that ExpressVPN circumvents the censorship on its own,\r\nsince that’s what most of their users would want.\r\n\r\n[ ybar, ymin=0.6, enlargelimits=0.15, legend\r\nstyle=<span>at=<span>(0.5,-0.3)</span>, anchor=north,legend\r\ncolumns=-1</span>, ylabel=<span>Score</span>, symbolic x\r\ncoords=<span>Azerbaijan, Belarus, Finland, Estonia, Georgia, Latvia,\r\nLithuania, Ukraine, Kazakhstan, Kyrgyzstan, Mongolia, Russia,\r\nUSA</span>, xtick=data, ybar=3pt, bar width=1 nodes near coords, nodes\r\nnear coords align=<span>vertical</span>, every node near coord/.append\r\nstyle=<span>rotate=90, anchor=west</span>, x tick label\r\nstyle=<span>rotate=45,anchor=east</span>, x label\r\nstyle=<span>at=<span>(0.5,-0.25)</span></span> ] coordinates\r\n<span>(Azerbaijan,0) (Belarus,0.803) (Kazakhstan,0.728) (Finland,0.764)\r\n(Lithuania,0.806) (Kyrgyzstan,0.766) (Ukraine,0.814) (Latvia,0.784)\r\n(Estonia,0.8) (Russia,1.0) (Georgia,0) (Mongolia,0) (USA, 0)</span>;\r\ncoordinates <span>(Finland,0.702) (Belarus,0) (Lithuania,0.71)\r\n(Kyrgyzstan,0.735) (Ukraine,0.736) (Latvia,0.724) (Estonia,0.742)\r\n(Russia,1.0) (Kazakhstan,0.720) (Azerbaijan,0.722) (Mongolia,0.720)\r\n(Georgia,0.732) (USA, 0)</span>; +[error bars/.cd,y dir=both,y explicit]\r\ncoordinates <span>(USA, 0.717) +- (USA, 0.073)</span>;\r\n\r\n(<span>rel axis cs:0,0</span> |- <span>axis cs:Belarus,0.79</span>) –\r\n(<span>axis cs:USA,0.79</span> -| <span>rel axis cs:1,0</span>);\r\n\r\nCurrent Issues\r\n==============\r\n\r\nA major obstacle that we plan to overcome in the future is the\r\ninconsistency of the censorship from our different viewpoints from\r\n*within* Russian borders. Using our various VPN subscriptions and a\r\nphysical computer that we have access to in Russia we are observing\r\ndifferent levels of access to certain websites. Our PC in Russia is\r\ncensored in more cases then it is not when testing against the list of\r\ntarget websites. Where our VPN service through IP Vanish seems to get\r\nthrough to most of these websites. This may be due to the VPN company\r\npurposely fetching these locked websites as this would be a feature that\r\nmost of its users would want or their servers are falsely labeled as\r\nbeing located in Moscow. We just happen to be in the fringe case of\r\nactually wanting to be censored.\r\n\r\nWe plan on either only collecting Russian samples from our dedicated PC\r\nor trying a difference VPN service. An issue may be similar\r\nde-censorship in the neighboring countries too, but we do not have\r\ndedicated machines in these locations to check. This may lead to a lot\r\nof invalid results in the end.\r\n\r\nFuture Work\r\n===========\r\n\r\nCurrently we plan on focusing on expanding our HTML comparison methods\r\nto try and find what type of things are being changed if only parts of\r\nwebpages are being censored. To account for different dynamic content\r\nthat may change from instance to instance (ads, time dependant\r\ninformation).\r\n\r\nWe have references to methods of figure printing the type of censorship\r\nbeing used from the Russian ISPs, we would like to integrate this into\r\nour project as well.\r\n\r\n<span>9</span>\r\n\r\nAnonymous, *The Collateral Damage of Internet Censorship by DNS\r\nInjection*. SIGCOMM Comput. Commun. Rev., July 2012.\r\n\r\n*“Law on Protecting Children from Negative and Harmful Information.”*\r\nPresident of Russia. N.p., n.d. Web. 14 Feb. 2015.\r\n\r\n*Russian Federation: Federal Law No. 149-FZ* of July 24, 2006, on\r\nInformation, Information Technology and Information Protection (as\r\nAmended up to Federal Law No. 398-FZ of December 28, 2013). N.p., n.d.\r\nWeb. 14 Feb. 2015.\r\n\r\nC. Lab., *Routing Gone Wild: Documenting upstream filtering in Oman via\r\nIndia.* Technical report, Citizen Lab, 2012.\r\n\r\nS. Zackwehdex, *Super Fast and Accurate string distance algorithm:\r\nSift3*, Web post, accessed at May 1, 2015, available at\\\r\n<http://siderite.blogspot.com/2007/04/super-fast-and-accurate-string-distance.html>.\r\n\r\n[^1]: Federal Service for Supervision of Communications, Information\r\n    Technology and Mass Media (Russian:\r\n\r\n    Федеральная служба по надзору в сфере массовых коммуникаций и связи\r\n\r\n    )\r\n\r\n[^2]: <https://www.ipvanish.com/>\r\n\r\n[^3]: http://openvpn.net/\r\n\r\n[^4]: https://code.google.com/p/tunnelblick/\r\n\r\n[^5]: <https://www.ipvanish.com/why-vpn.php>\r\n\r\n[^6]: <http://www.websiteoptimization.com/speed/tweak/average-web-page/>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}